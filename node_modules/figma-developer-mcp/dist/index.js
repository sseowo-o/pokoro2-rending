#!/usr/bin/env node
import{StdioServerTransport as ne}from"@modelcontextprotocol/sdk/server/stdio.js";import{McpServer as Z}from"@modelcontextprotocol/sdk/server/mcp.js";import{z as m}from"zod";import S from"fs";import{isTruthy as C}from"remeda";function d(e,t,i){if(!(typeof t=="object"&&t!==null)||!(e in t))return!1;let r=t[e];return i?i(r):r!==void 0}function I(e){return typeof e=="object"&&!!e&&"clipsContent"in e&&typeof e.clipsContent=="boolean"}function N(e){return typeof e=="object"&&!!e&&"absoluteBoundingBox"in e&&typeof e.absoluteBoundingBox=="object"&&!!e.absoluteBoundingBox&&"x"in e.absoluteBoundingBox&&"y"in e.absoluteBoundingBox&&"width"in e.absoluteBoundingBox&&"height"in e.absoluteBoundingBox}function k(e){return typeof e=="object"&&e!==null&&"top"in e&&"right"in e&&"bottom"in e&&"left"in e}function T(e,t){let i=t;return typeof t=="object"&&!!t&&e in i&&typeof i[e]=="object"&&!!i[e]&&"x"in i[e]&&"y"in i[e]&&"width"in i[e]&&"height"in i[e]}function P(e){return Array.isArray(e)&&e.length===4&&e.every(t=>typeof t=="number")}import p from"fs";import W from"path";async function E(e,t,i){try{p.existsSync(t)||p.mkdirSync(t,{recursive:!0});let o=W.join(t,e),r=await fetch(i,{method:"GET"});if(!r.ok)throw new Error(`Failed to download image: ${r.statusText}`);let s=p.createWriteStream(o),a=r.body?.getReader();if(!a)throw new Error("Failed to get response body");return new Promise((c,l)=>{let u=async()=>{try{for(;;){let{done:n,value:g}=await a.read();if(n){s.end();break}s.write(g)}c(o)}catch(n){s.end(),p.unlink(o,()=>{}),l(n)}};s.on("error",n=>{a.cancel(),p.unlink(o,()=>{}),l(new Error(`Failed to write image: ${n.message}`))}),u()})}catch(o){let r=o instanceof Error?o.message:String(o);throw new Error(`Error downloading image: ${r}`)}}function x(e){if(typeof e!="object"||e===null)return e;if(Array.isArray(e))return e.map(i=>x(i));let t={};for(let i in e)if(Object.prototype.hasOwnProperty.call(e,i)){let o=e[i],r=x(o);r!==void 0&&!(Array.isArray(r)&&r.length===0)&&!(typeof r=="object"&&r!==null&&Object.keys(r).length===0)&&(t[i]=r)}return t}function D(e,t=1){let i=Math.round(e.r*255),o=Math.round(e.g*255),r=Math.round(e.b*255),s=Math.round(t*e.a*100)/100;return{hex:"#"+((1<<24)+(i<<16)+(o<<8)+r).toString(16).slice(1).toUpperCase(),opacity:s}}function w(e,t=1){let i=Math.round(e.r*255),o=Math.round(e.g*255),r=Math.round(e.b*255),s=Math.round(t*e.a*100)/100;return`rgba(${i}, ${o}, ${r}, ${s})`}function G(e="var"){let t="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",i="";for(let o=0;o<6;o++){let r=Math.floor(Math.random()*t.length);i+=t[r]}return`${e}_${i}`}function v(e,{ignoreZero:t=!0,suffix:i="px"}={}){let{top:o,right:r,bottom:s,left:a}=e;if(!(t&&o===0&&r===0&&s===0&&a===0))return o===r&&r===s&&s===a?`${o}${i}`:r===a?o===s?`${o}${i} ${r}${i}`:`${o}${i} ${r}${i} ${s}${i}`:`${o}${i} ${r}${i} ${s}${i} ${a}${i}`}function R(e){if(e.type==="IMAGE")return{type:"IMAGE",imageRef:e.imageRef,scaleMode:e.scaleMode};if(e.type==="SOLID"){let{hex:t,opacity:i}=D(e.color,e.opacity);return i===1?t:w(e.color,i)}else{if(["GRADIENT_LINEAR","GRADIENT_RADIAL","GRADIENT_ANGULAR","GRADIENT_DIAMOND"].includes(e.type))return{type:e.type,gradientHandlePositions:e.gradientHandlePositions,gradientStops:e.gradientStops.map(({position:t,color:i})=>({position:t,color:D(i)}))};throw new Error(`Unknown paint type: ${e.type}`)}}function h(e){return e.visible??!0}function H(e,t){let i=q(e),o=J(e,t,i.mode)||{};return{...i,...o}}function L(e,t){if(t&&t.mode!=="none"){let{children:i,mode:o,axis:r}=t,s=U(r,o);if(i.length>0&&i.reduce((c,l)=>c?"layoutPositioning"in l&&l.layoutPositioning==="ABSOLUTE"?!0:s==="horizontal"?"layoutSizingHorizontal"in l&&l.layoutSizingHorizontal==="FILL":s==="vertical"?"layoutSizingVertical"in l&&l.layoutSizingVertical==="FILL":!1:!1,!0))return"stretch"}switch(e){case"MIN":return;case"MAX":return"flex-end";case"CENTER":return"center";case"SPACE_BETWEEN":return"space-between";case"BASELINE":return"baseline";default:return}}function _(e){switch(e){case"MIN":return;case"MAX":return"flex-end";case"CENTER":return"center";case"STRETCH":return"stretch";default:return}}function M(e){if(e==="FIXED")return"fixed";if(e==="FILL")return"fill";if(e==="HUG")return"hug"}function U(e,t){switch(e){case"primary":switch(t){case"row":return"horizontal";case"column":return"vertical"}case"counter":switch(t){case"row":return"horizontal";case"column":return"vertical"}}}function q(e){if(!I(e))return{mode:"none"};let t={mode:!e.layoutMode||e.layoutMode==="NONE"?"none":e.layoutMode==="HORIZONTAL"?"row":"column"},i=[];return e.overflowDirection?.includes("HORIZONTAL")&&i.push("x"),e.overflowDirection?.includes("VERTICAL")&&i.push("y"),i.length>0&&(t.overflowScroll=i),t.mode==="none"||(t.justifyContent=L(e.primaryAxisAlignItems??"MIN",{children:e.children,axis:"primary",mode:t.mode}),t.alignItems=L(e.counterAxisAlignItems??"MIN",{children:e.children,axis:"counter",mode:t.mode}),t.alignSelf=_(e.layoutAlign),t.wrap=e.layoutWrap==="WRAP"?!0:void 0,t.gap=e.itemSpacing?`${e.itemSpacing??0}px`:void 0,(e.paddingTop||e.paddingBottom||e.paddingLeft||e.paddingRight)&&(t.padding=v({top:e.paddingTop??0,right:e.paddingRight??0,bottom:e.paddingBottom??0,left:e.paddingLeft??0}))),t}function J(e,t,i){if(!N(e))return;let o={mode:i};if(o.sizing={horizontal:M(e.layoutSizingHorizontal),vertical:M(e.layoutSizingVertical)},I(t)&&(t?.layoutMode==="NONE"||e.layoutPositioning==="ABSOLUTE"))return e.layoutPositioning==="ABSOLUTE"&&(o.position="absolute"),e.absoluteBoundingBox&&t.absoluteBoundingBox&&(o.locationRelativeToParent={x:e.absoluteBoundingBox.x-(t?.absoluteBoundingBox?.x??e.absoluteBoundingBox.x),y:e.absoluteBoundingBox.y-(t?.absoluteBoundingBox?.y??e.absoluteBoundingBox.y)}),o;if(T("absoluteBoundingBox",e)&&T("absoluteBoundingBox",t)){let r={};i==="row"?(!e.layoutGrow&&e.layoutSizingHorizontal=="FIXED"&&(r.width=e.absoluteBoundingBox.width),e.layoutAlign!=="STRETCH"&&e.layoutSizingVertical=="FIXED"&&(r.height=e.absoluteBoundingBox.height)):i==="column"&&(e.layoutAlign!=="STRETCH"&&e.layoutSizingHorizontal=="FIXED"&&(r.width=e.absoluteBoundingBox.width),!e.layoutGrow&&e.layoutSizingVertical=="FIXED"&&(r.height=e.absoluteBoundingBox.height),e.preserveRatio&&(r.aspectRatio=e.absoluteBoundingBox?.width/e.absoluteBoundingBox?.height)),Object.keys(r).length>0&&(o.dimensions=r)}return o}function V(e){let t={colors:[]};return d("strokes",e)&&Array.isArray(e.strokes)&&e.strokes.length&&(t.colors=e.strokes.filter(h).map(R)),d("strokeWeight",e)&&typeof e.strokeWeight=="number"&&e.strokeWeight>0&&(t.strokeWeight=`${e.strokeWeight}px`),d("strokeDashes",e)&&Array.isArray(e.strokeDashes)&&e.strokeDashes.length&&(t.strokeDashes=e.strokeDashes),d("individualStrokeWeights",e,k)&&(t.strokeWeight=v(e.individualStrokeWeights)),t}function z(e){if(!d("effects",e))return{};let t=e.effects.filter(l=>l.visible),i=t.filter(l=>l.type==="DROP_SHADOW").map(X),o=t.filter(l=>l.type==="INNER_SHADOW").map(Y),r=[...i,...o].join(", "),s=t.filter(l=>l.type==="LAYER_BLUR").map(O).join(" "),a=t.filter(l=>l.type==="BACKGROUND_BLUR").map(O).join(" "),c={};return r&&(c.boxShadow=r),s&&(c.filter=s),a&&(c.backdropFilter=a),c}function X(e){return`${e.offset.x}px ${e.offset.y}px ${e.radius}px ${e.spread??0}px ${w(e.color)}`}function Y(e){return`inset ${e.offset.x}px ${e.offset.y}px ${e.radius}px ${e.spread??0}px ${w(e.color)}`}function O(e){return`blur(${e.radius}px)`}function B(e){let{name:t,lastModified:i,thumbnailUrl:o}=e,r;"document"in e?r=Object.values(e.document.children):r=Object.values(e.nodes).map(c=>c.document);let s={styles:{}},a=r.filter(h).map(c=>j(s,c)).filter(c=>c!=null);return{name:t,lastModified:i,thumbnailUrl:o||"",nodes:a,globalVars:s}}function y(e,t,i){let[o]=Object.entries(e.styles).find(([s,a])=>JSON.stringify(a)===JSON.stringify(t))??[];if(o)return o;let r=G(i);return e.styles[r]=t,r}function j(e,t,i){let{id:o,name:r,type:s}=t,a={id:o,name:r,type:s};if(d("style",t)&&Object.keys(t.style).length){let n=t.style,g={fontFamily:n.fontFamily,fontWeight:n.fontWeight,fontSize:n.fontSize,lineHeight:n.lineHeightPx&&n.fontSize?`${n.lineHeightPx/n.fontSize}em`:void 0,letterSpacing:n.letterSpacing&&n.letterSpacing!==0&&n.fontSize?`${n.letterSpacing/n.fontSize*100}%`:void 0,textCase:n.textCase,textAlignHorizontal:n.textAlignHorizontal,textAlignVertical:n.textAlignVertical};a.textStyle=y(e,g,"style")}if(d("fills",t)&&Array.isArray(t.fills)&&t.fills.length){let n=t.fills.map(R);a.fills=y(e,n,"fill")}let c=V(t);c.colors.length&&(a.strokes=y(e,c,"stroke"));let l=z(t);Object.keys(l).length&&(a.effects=y(e,l,"effect"));let u=H(t,i);if(Object.keys(u).length>1&&(a.layout=y(e,u,"layout")),d("characters",t,C)&&(a.text=t.characters),d("opacity",t)&&typeof t.opacity=="number"&&t.opacity!==1&&(a.opacity=t.opacity),d("cornerRadius",t)&&typeof t.cornerRadius=="number"&&(a.borderRadius=`${t.cornerRadius}px`),d("rectangleCornerRadii",t,P)&&(a.borderRadius=`${t.rectangleCornerRadii[0]}px ${t.rectangleCornerRadii[1]}px ${t.rectangleCornerRadii[2]}px ${t.rectangleCornerRadii[3]}px`),d("children",t)&&t.children.length>0){let n=t.children.filter(h).map(g=>j(e,g,t)).filter(g=>g!=null);n.length&&(a.children=n)}return s==="VECTOR"&&(a.type="IMAGE-SVG"),x(a)}var F=class{constructor(t){this.baseUrl="https://api.figma.com/v1";this.apiKey=t}async request(t){if(typeof fetch!="function")throw new Error("The MCP server is being run in a Node.js environment where `fetch` is not available. You won't be able to access any data related to the Figma file.\n\nAs the coding AI assistant, PLEASE ABORT THE CURRENT REQUEST. No alternate approaches will work. Help the user fix this issue so you can proceed by letting them know that they need to run the MCP server with Node.js version 18 or higher.");try{f.log(`Calling ${this.baseUrl}${t}`);let i=await fetch(`${this.baseUrl}${t}`,{headers:{"X-Figma-Token":this.apiKey}});if(!i.ok)throw{status:i.status,err:i.statusText||"Unknown error"};return await i.json()}catch(i){throw i.status?i:new Error("Failed to make request to Figma API")}}async getImageFills(t,i,o){if(i.length===0)return[];let r=[],s=`/files/${t}/images`,a=await this.request(s),{images:c={}}=a.meta;return r=i.map(async({imageRef:l,fileName:u})=>{let n=c[l];return n?E(u,o,n):""}),Promise.all(r)}async getImages(t,i,o){let r=i.filter(({fileType:n})=>n==="png").map(({nodeId:n})=>n),s=r.length>0?this.request(`/images/${t}?ids=${r.join(",")}&scale=2&format=png`).then(({images:n={}})=>n):{},a=i.filter(({fileType:n})=>n==="svg").map(({nodeId:n})=>n),c=a.length>0?this.request(`/images/${t}?ids=${a.join(",")}&scale=2&format=svg`).then(({images:n={}})=>n):{},l=await Promise.all([s,c]).then(([n,g])=>({...n,...g})),u=i.map(({nodeId:n,fileName:g})=>{let b=l[n];return b?E(g,o,b):!1}).filter(n=>!!n);return Promise.all(u)}async getFile(t,i){try{let o=`/files/${t}${i?`?depth=${i}`:""}`;f.log(`Retrieving Figma file: ${t} (depth: ${i??"default"})`);let r=await this.request(o);f.log("Got response");let s=B(r);return $("figma-raw.json",r),$("figma-simplified.json",s),s}catch(o){throw console.error("Failed to get file:",o),o}}async getNode(t,i,o){let r=`/files/${t}/nodes?ids=${i}${o?`&depth=${o}`:""}`,s=await this.request(r);f.log("Got response from getNode, now parsing."),$("figma-raw.json",s);let a=B(s);return $("figma-simplified.json",a),a}};function $(e,t){try{if(process.env.NODE_ENV!=="development")return;let i="logs";try{S.accessSync(process.cwd(),S.constants.W_OK)}catch(o){f.log("Failed to write logs:",o);return}S.existsSync(i)||S.mkdirSync(i),S.writeFileSync(`${i}/${e}`,JSON.stringify(t,null,2))}catch(i){console.debug("Failed to write logs:",i)}}import Q from"express";import{SSEServerTransport as ee}from"@modelcontextprotocol/sdk/server/sse.js";var f={log:(...e)=>{},error:(...e)=>{}},A=class{constructor(t){this.sseTransport=null;this.figmaService=new F(t),this.server=new Z({name:"Figma MCP Server",version:"0.1.12"},{capabilities:{logging:{},tools:{}}}),this.registerTools()}registerTools(){this.server.tool("get_figma_data","When the nodeId cannot be obtained, obtain the layout information about the entire Figma file",{fileKey:m.string().describe("The key of the Figma file to fetch, often found in a provided URL like figma.com/(file|design)/<fileKey>/..."),nodeId:m.string().optional().describe("The ID of the node to fetch, often found as URL parameter node-id=<nodeId>, always use if provided"),depth:m.number().optional().describe("How many levels deep to traverse the node tree, only use if explicitly requested by the user")},async({fileKey:t,nodeId:i,depth:o})=>{try{f.log(`Fetching ${o?`${o} layers deep`:"all layers"} of ${i?`node ${i} from file`:"full file"} ${t}`);let r;i?r=await this.figmaService.getNode(t,i,o):r=await this.figmaService.getFile(t,o),f.log(`Successfully fetched file: ${r.name}`);let{nodes:s,globalVars:a,...c}=r,l=`[${s.map(b=>JSON.stringify(b,null,2)).join(",")}]`,u=JSON.stringify(c,null,2),n=JSON.stringify(a,null,2);return{content:[{type:"text",text:`{ "metadata": ${u}, "nodes": ${l}, "globalVars": ${n} }`}]}}catch(r){return f.error(`Error fetching file ${t}:`,r),{isError:!0,content:[{type:"text",text:`Error fetching file: ${r}`}]}}}),this.server.tool("download_figma_images","Download SVG and PNG images used in a Figma file based on the IDs of image or icon nodes",{fileKey:m.string().describe("The key of the Figma file containing the node"),nodes:m.object({nodeId:m.string().describe("The ID of the Figma image node to fetch, formatted as 1234:5678"),imageRef:m.string().optional().describe("If a node has an imageRef fill, you must include this variable. Leave blank when downloading Vector SVG images."),fileName:m.string().describe("The local name for saving the fetched file")}).array().describe("The nodes to fetch as images"),localPath:m.string().describe("The absolute path to the directory where images are stored in the project. Automatically creates directories if needed.")},async({fileKey:t,nodes:i,localPath:o})=>{try{let r=i.filter(({imageRef:n})=>!!n),s=this.figmaService.getImageFills(t,r,o),a=i.filter(({imageRef:n})=>!n).map(({nodeId:n,fileName:g})=>({nodeId:n,fileName:g,fileType:g.endsWith(".svg")?"svg":"png"})),c=this.figmaService.getImages(t,a,o),l=await Promise.all([s,c]).then(([n,g])=>[...n,...g]);return{content:[{type:"text",text:!l.find(n=>!n)?`Success, ${l.length} images downloaded: ${l.join(", ")}`:"Failed"}]}}catch(r){return f.error(`Error downloading images from file ${t}:`,r),{isError:!0,content:[{type:"text",text:`Error downloading images: ${r}`}]}}})}async connect(t){await this.server.connect(t),f.log=(...i)=>{this.server.server.sendLoggingMessage({level:"info",data:i})},f.error=(...i)=>{this.server.server.sendLoggingMessage({level:"error",data:i})},f.log("Server connected and ready to process requests")}async startHttpServer(t){let i=Q();i.get("/sse",async(o,r)=>{console.log("New SSE connection established"),this.sseTransport=new ee("/messages",r),await this.server.connect(this.sseTransport)}),i.post("/messages",async(o,r)=>{if(!this.sseTransport){r.sendStatus(400);return}await this.sseTransport.handlePostMessage(o,r)}),f.log=console.log,f.error=console.error,i.listen(t,()=>{f.log(`HTTP server listening on port ${t}`),f.log(`SSE endpoint available at http://localhost:${t}/sse`),f.log(`Message endpoint available at http://localhost:${t}/messages`)})}};import{config as te}from"dotenv";import ie from"yargs";import{hideBin as re}from"yargs/helpers";te();function oe(e){return e.length<=4?"****":`****${e.slice(-4)}`}function K(e){let t=ie(re(process.argv)).options({"figma-api-key":{type:"string",description:"Figma API key"},port:{type:"number",description:"Port to run the server on"}}).help().parseSync(),i={figmaApiKey:"",port:3333,configSources:{figmaApiKey:"env",port:"default"}};return t["figma-api-key"]?(i.figmaApiKey=t["figma-api-key"],i.configSources.figmaApiKey="cli"):process.env.FIGMA_API_KEY&&(i.figmaApiKey=process.env.FIGMA_API_KEY,i.configSources.figmaApiKey="env"),t.port?(i.port=t.port,i.configSources.port="cli"):process.env.PORT&&(i.port=parseInt(process.env.PORT,10),i.configSources.port="env"),i.figmaApiKey||(console.error("FIGMA_API_KEY is required (via CLI argument --figma-api-key or .env file)"),process.exit(1)),e||(console.log(`
Configuration:`),console.log(`- FIGMA_API_KEY: ${oe(i.figmaApiKey)} (source: ${i.configSources.figmaApiKey})`),console.log(`- PORT: ${i.port} (source: ${i.configSources.port})`),console.log()),i}import{resolve as se}from"path";import{config as ae}from"dotenv";ae({path:se(process.cwd(),".env")});async function le(){let e=process.env.NODE_ENV==="cli"||process.argv.includes("--stdio"),t=K(e),i=new A(t.figmaApiKey);if(e){let o=new ne;await i.connect(o)}else console.log(`Initializing Figma MCP Server in HTTP mode on port ${t.port}...`),await i.startHttpServer(t.port)}le().catch(e=>{console.error("Failed to start server:",e),process.exit(1)});export{le as startServer};
